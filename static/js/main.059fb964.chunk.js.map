{"version":3,"sources":["components/Title.js","components/Loading.js","components/Question.js","components/WinMessage.js","components/Message.js","components/Button.js","helpers/dexGenerator.js","helpers/answerGenerator.js","services/getPokemon.js","helpers/compilePokemon.js","helpers/pokemonGenerator.js","helpers/refreshPokemonData.js","components/ResetButton.js","components/ButtonPlaceholder.js","helpers/difficulties.js","components/DifficultyButtons.js","components/SettingButtons.js","components/Header.js","components/BlockSprite.js","components/BlockText.js","helpers/checkAnswer.js","components/Block.js","components/DittoBlock.js","components/VictiniBlock.js","components/ConditionalBlock.js","components/Grid.js","components/Game.js","components/App.js","styles/GlobalStyles.js","serviceWorker.js","index.js"],"names":["StyledTitle","styled","h1","Title","StyledLoading","h3","Loading","StyledQuestion","Question","answer","defaultProps","StyledMessage","WinMessage","MessageContainer","div","Message","busy","win","Button","button","dexGenerator","blocks","dex","length","newDex","Math","floor","random","indexOf","push","createDex","answerGenerator","getPokemon","fetch","then","response","json","data","catch","error","console","log","compilePokemon","Promise","all","map","num","pokemonGenerator","numPokemon","a","pokemon","pokemonData","selected","refreshPokemonData","setBusy","setPokemonData","difficulty","ResetButton","onClick","StyledButtonPlaceholder","ButtonPlaceholder","mode","deactivated","difficulties","StyledButtonContainer","DifficultyButtons","setDifficulty","setting","key","SettingButtonsBar","SettingButtons","StyledHeader","Header","StyledSprite","img","BlockSprite","sprite","text","src","alt","StyledBlockText","p","BlockText","checkAnswer","dexNumber","previousState","StyledBlock","Block","className","disabled","StyledDittoBlock","DittoBlock","StyledVictiniBlock","VictiniBlock","ConditionalBlock","includes","GridContainer","StyledGrid","Grid","singlePokemon","species","name","sprites","front_default","id","GameContainer","Game","useState","useEffect","App","GlobalStyle","createGlobalStyle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.059fb964.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledTitle = styled.h1`\r\n  width: 100%;\r\n  max-width: 375px;\r\n  font-size: 1.8em;\r\n  text-align: center;\r\n  line-height: 1.3em;\r\n`;\r\n\r\nconst Title = () => (\r\n  <>\r\n    <StyledTitle>The National Pokédex Game</StyledTitle>\r\n  </>\r\n);\r\nexport default Title;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledLoading = styled.h3`\r\n  margin: 0;\r\n  padding: 0;\r\n  font-size: 1.8em;\r\n  line-height: 1.4em;\r\n  text-align: center;\r\n\r\n  span {\r\n    color: #FFFF33;\r\n  }\r\n`;\r\n\r\nconst Loading = () => (\r\n  <StyledLoading>\r\n    Loading...\r\n  </StyledLoading>\r\n);\r\nexport default Loading;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledQuestion = styled.h3`\r\n  margin: 0;\r\n  padding: 0;\r\n  font-size: 1.4em;\r\n  line-height: 1.4em;\r\n  text-align: center;\r\n\r\n  span {\r\n    color: #FFFF33;\r\n  }\r\n`;\r\n\r\nconst Question = ({ answer }) => (\r\n  <StyledQuestion>\r\n    Which Pokémon has National Pokedex Number\r\n    <span>\r\n      {' '}\r\n      {answer}\r\n      {' '}\r\n    </span>\r\n    ?\r\n  </StyledQuestion>\r\n);\r\n\r\nQuestion.defaultProps = {\r\n  answer: 0,\r\n};\r\n\r\nQuestion.propTypes = {\r\n  answer: PropTypes.number,\r\n};\r\n\r\nexport default Question;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledMessage = styled.h3`\r\n  margin: 0;\r\n  padding: 0;\r\n  font-size: 1.8em;\r\n  line-height: 1.4em;\r\n  text-align: center;\r\n\r\n  span {\r\n    color: #FFFF33;\r\n  }\r\n`;\r\n\r\nconst WinMessage = () => (\r\n  <StyledMessage>\r\n    You did it!\r\n  </StyledMessage>\r\n);\r\n\r\nexport default WinMessage;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport Loading from './Loading';\r\nimport Question from './Question';\r\nimport WinMessage from './WinMessage';\r\n\r\nconst MessageContainer = styled.div`\r\n  height: 100px;\r\n  width: 100%;\r\n  max-width: 320px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst Message = ({ busy, answer, win }) => {\r\n  const loadingCondition = () => {\r\n    if (busy) {\r\n      return (<Loading />);\r\n    } if (win) {\r\n      return (\r\n        <WinMessage />);\r\n    }\r\n    return (\r\n      <Question\r\n        answer={answer}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <MessageContainer>\r\n      {loadingCondition()}\r\n    </MessageContainer>\r\n  );\r\n};\r\n\r\nMessage.defaultProps = {\r\n  answer: 0,\r\n};\r\n\r\nMessage.propTypes = {\r\n  busy: PropTypes.bool.isRequired,\r\n  answer: PropTypes.number,\r\n  win: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default Message;\r\n","import styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  width: 70px;\r\n  height: 40px;\r\n  margin: 0 5px;\r\n  padding: 0 10px;\r\n  border-radius: 10px;\r\n  color: white;\r\n  font-family: 'Bungee', sans-serif;\r\n  border: none;\r\n  background-color: blue;\r\n`;\r\n\r\nexport default Button;\r\n","const dexGenerator = (blocks) => {\r\n  const randomDex = () => Math.floor(Math.random() * 893) + 1;\r\n  const createDex = () => {\r\n    const dex = [];\r\n    while (dex.length < blocks) {\r\n      const newDex = randomDex();\r\n      if (dex.indexOf(newDex) === -1) {\r\n        dex.push(newDex);\r\n      }\r\n    }\r\n    return dex;\r\n  };\r\n  return createDex();\r\n};\r\n\r\nexport default dexGenerator;\r\n","const answerGenerator = (dex) => {\r\n  const answerIndex = Math.floor(Math.random() * dex.length);\r\n  return dex[answerIndex];\r\n};\r\n\r\nexport default answerGenerator;\r\n","const getPokemon = (dex) => fetch(`https://pokeapi.co/api/v2/pokemon/${dex}`)\r\n  .then((response) => response.json())\r\n  .then((data) => {\r\n    return (data);\r\n  })\r\n  .catch((error) => {\r\n    console.log(error);\r\n  });\r\n\r\nexport default getPokemon;\r\n","import getPokemon from '../services/getPokemon';\r\n\r\nconst compilePokemon = (dex) => Promise.all(dex.map((num) => getPokemon(num)));\r\n\r\nexport default compilePokemon;\r\n","import dexGenerator from './dexGenerator';\r\nimport answerGenerator from './answerGenerator';\r\nimport compilePokemon from './compilePokemon';\r\n\r\nconst pokemonGenerator = async (numPokemon) => {\r\n  const dex = dexGenerator(numPokemon);\r\n  const answer = answerGenerator(dex);\r\n  const pokemon = await compilePokemon(dex);\r\n  const pokemonData = {\r\n    answer,\r\n    selected: [],\r\n    pokemon,\r\n    win: false,\r\n  };\r\n  return pokemonData;\r\n};\r\n\r\nexport default pokemonGenerator;\r\n","import pokemonGenerator from './pokemonGenerator';\r\n\r\nconst refreshPokemonData = (setBusy, setPokemonData, difficulty) => {\r\n  setBusy(true);\r\n  pokemonGenerator(difficulty.numPokemon)\r\n    .then((data) => setPokemonData({\r\n      ...data,\r\n    }));\r\n  setBusy(false);\r\n};\r\n\r\nexport default refreshPokemonData;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from './Button';\r\nimport refreshPokemonData from '../helpers/refreshPokemonData';\r\n\r\nconst ResetButton = ({ setBusy, setPokemonData, difficulty }) => (\r\n  <Button\r\n    onClick={() => refreshPokemonData(setBusy, setPokemonData, difficulty)}\r\n  >\r\n    RESET\r\n  </Button>\r\n);\r\n\r\nResetButton.propTypes = {\r\n  setBusy: PropTypes.func.isRequired,\r\n  setPokemonData: PropTypes.func.isRequired,\r\n  difficulty: PropTypes.shape({\r\n    mode: PropTypes.string.isRequired,\r\n    numPokemon: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default ResetButton;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledButtonPlaceholder = styled.button`\r\n  width: 70px;\r\n  height: 40px;\r\n  margin: 0 5px;\r\n  padding: 0 10px;\r\n  border-radius: 10px;\r\n  color: maroon;\r\n  font-family: 'Bungee', sans-serif;\r\n  border: none;\r\n  background-color: white;\r\n`;\r\n\r\nconst ButtonPlaceholder = ({ mode }) => (\r\n  <StyledButtonPlaceholder deactivated>\r\n    {mode}\r\n  </StyledButtonPlaceholder>\r\n);\r\n\r\nButtonPlaceholder.propTypes = {\r\n  mode: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ButtonPlaceholder;\r\n","const difficulties = [\r\n  {\r\n    mode: 'easy',\r\n    numPokemon: 6,\r\n  },\r\n  {\r\n    mode: 'hard',\r\n    numPokemon: 12,\r\n  },\r\n  {\r\n    mode: 'ultra',\r\n    numPokemon: 24,\r\n  },\r\n];\r\n\r\nexport default difficulties;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport Button from './Button';\r\nimport ButtonPlaceholder from './ButtonPlaceholder';\r\nimport difficulties from '../helpers/difficulties';\r\n\r\nconst StyledButtonContainer = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nconst DifficultyButtons = ({\r\n  setDifficulty, difficulty,\r\n}) => (\r\n  <StyledButtonContainer>\r\n    {\r\n    difficulties.map((setting) => (\r\n      setting.mode === difficulty.mode\r\n        ? (\r\n          <ButtonPlaceholder\r\n            key={setting.mode}\r\n            mode={setting.mode}\r\n          >\r\n            {setting.mode}\r\n          </ButtonPlaceholder>\r\n        ) : (\r\n          <Button\r\n            key={setting.mode}\r\n            onClick={() => {\r\n              setDifficulty({\r\n                mode: setting.mode,\r\n                numPokemon: setting.numPokemon,\r\n              });\r\n            }}\r\n          >\r\n            {setting.mode}\r\n          </Button>\r\n        )))\r\n}\r\n  </StyledButtonContainer>\r\n);\r\n\r\nDifficultyButtons.propTypes = {\r\n  setDifficulty: PropTypes.func.isRequired,\r\n  difficulty: PropTypes.shape({\r\n    mode: PropTypes.string.isRequired,\r\n    numPokemon: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default DifficultyButtons;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport ResetButton from './ResetButton';\r\nimport DifficultyButtons from './DifficultyButtons';\r\n\r\nconst SettingButtonsBar = styled.div`\r\n  width: 100%;\r\n  max-width: 360px;\r\n  height: 6vh;\r\n  padding: 15px 0;\r\n  display: flex; \r\n  flex-flow: row nowrap;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst SettingButtons = ({\r\n  setDifficulty, setBusy, setPokemonData, difficulty,\r\n}) => (\r\n  <SettingButtonsBar>\r\n    <ResetButton\r\n      setBusy={setBusy}\r\n      setPokemonData={setPokemonData}\r\n      difficulty={difficulty}\r\n    />\r\n    <DifficultyButtons\r\n      setDifficulty={setDifficulty}\r\n      setBusy={setBusy}\r\n      setPokemonData={setPokemonData}\r\n      difficulty={difficulty}\r\n    />\r\n  </SettingButtonsBar>\r\n);\r\n\r\nSettingButtons.propTypes = {\r\n  setDifficulty: PropTypes.func.isRequired,\r\n  setBusy: PropTypes.func.isRequired,\r\n  setPokemonData: PropTypes.func.isRequired,\r\n  difficulty: PropTypes.shape({\r\n    mode: PropTypes.string.isRequired,\r\n    numPokemon: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default SettingButtons;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport Title from './Title';\r\nimport Message from './Message';\r\nimport SettingButtons from './SettingButtons';\r\n\r\nconst StyledHeader = styled.div`\r\n  position: fixed;\r\n  z-index: 1;\r\n  top: 0;\r\n  left: 0;\r\n  background-color: black;\r\n  height: 280px;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-flow: column nowrap;\r\n  align-items: center;\r\n`;\r\n\r\nconst Header = ({\r\n  busy, answer, difficulty, win, setDifficulty, setBusy, setPokemonData,\r\n}) => (\r\n  <StyledHeader>\r\n    <Title />\r\n    <Message\r\n      busy={busy}\r\n      answer={answer}\r\n      win={win}\r\n    />\r\n    <SettingButtons\r\n      setDifficulty={setDifficulty}\r\n      setBusy={setBusy}\r\n      setPokemonData={setPokemonData}\r\n      difficulty={difficulty}\r\n    />\r\n\r\n  </StyledHeader>\r\n);\r\n\r\nHeader.defaultProps = {\r\n  answer: 0,\r\n};\r\n\r\nHeader.propTypes = {\r\n  busy: PropTypes.bool.isRequired,\r\n  difficulty: PropTypes.shape({\r\n    mode: PropTypes.string.isRequired,\r\n    numPokemon: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n  answer: PropTypes.number,\r\n  win: PropTypes.bool.isRequired,\r\n  setDifficulty: PropTypes.func.isRequired,\r\n  setBusy: PropTypes.func.isRequired,\r\n  setPokemonData: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledSprite = styled.img`\r\n  height: 70%;\r\n`;\r\n\r\nconst BlockSprite = ({ sprite, text }) => (\r\n  <StyledSprite\r\n    src={sprite}\r\n    alt={text}\r\n  />\r\n);\r\n\r\nBlockSprite.propTypes = {\r\n  sprite: PropTypes.string.isRequired,\r\n  text: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default BlockSprite;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledBlockText = styled.p`\r\n  height: 30%;\r\n  width: 100%;\r\n  margin: 0;\r\n  padding: 0;\r\n  font-size: 0.9em;\r\n  background-color: green;\r\n  border-radius: 0 0 20px 20px;\r\n  text-align: center;\r\n`;\r\n\r\nconst BlockText = ({ text }) => (\r\n  <StyledBlockText>\r\n    {text}\r\n  </StyledBlockText>\r\n);\r\n\r\nBlockText.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default BlockText;\r\n","const checkAnswer = (dexNumber, pokemonData, setPokemonData) => (dexNumber === pokemonData.answer\r\n  ? (setPokemonData(previousState => ({\r\n    ...previousState,\r\n    win: true,\r\n  })))\r\n  : (setPokemonData(previousState => ({\r\n    ...previousState,\r\n    selected: [...previousState.selected, dexNumber],\r\n  }))));\r\n\r\nexport default checkAnswer;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport BlockSprite from './BlockSprite';\r\nimport BlockText from './BlockText';\r\nimport checkAnswer from '../helpers/checkAnswer';\r\n\r\nconst StyledBlock = styled.button`\r\n  all: unset;\r\n  height: 130px;\r\n  width: 130px;\r\n  margin: 10px;\r\n  cursor: pointer;\r\n  background-color: lightskyblue;\r\n  border-radius: 20px;\r\n  display: flex;\r\n  flex-flow: column nowrap;\r\n  align-items: center;\r\n\r\n  @media (min-height: 600px) {\r\n    margin: 20px 10px;\r\n  }\r\n`;\r\n\r\nconst Block = ({\r\n  className, sprite, text, dexNumber, pokemonData, setPokemonData, disabled,\r\n}) => (\r\n  <StyledBlock\r\n    className={className}\r\n    onClick={() => checkAnswer(dexNumber, pokemonData, setPokemonData)}\r\n    disabled={disabled}\r\n  >\r\n    <BlockSprite\r\n      sprite={sprite}\r\n      text={text}\r\n    />\r\n    <BlockText\r\n      text={text}\r\n    />\r\n  </StyledBlock>\r\n);\r\n\r\nBlock.defaultProps = {\r\n  className: '',\r\n  dexNumber: 0,\r\n};\r\n\r\nBlock.propTypes = {\r\n  className: PropTypes.string,\r\n  sprite: PropTypes.string.isRequired,\r\n  text: PropTypes.string.isRequired,\r\n  dexNumber: PropTypes.number,\r\n  pokemonData: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n    PropTypes.array,\r\n    PropTypes.object,\r\n  ]).isRequired,\r\n  setPokemonData: PropTypes.func.isRequired,\r\n  disabled: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default Block;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport Block from './Block';\r\n\r\nconst StyledDittoBlock = styled(Block)`\r\nbackground-color: #0c0b12;\r\n\r\np {\r\n  color: #ec8af5;\r\n  background-color: #191926;\r\n}\r\n`;\r\n\r\nconst DittoBlock = ({ disabled }) => (\r\n  <StyledDittoBlock\r\n    text=\"try again!\"\r\n    sprite=\"http://gummicode.github.io/national-pokedex-game/assets/ditto.png\"\r\n    disabled={disabled}\r\n  />\r\n);\r\n\r\nDittoBlock.propTypes = {\r\n  disabled: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default DittoBlock;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport Block from './Block';\r\n\r\nconst StyledVictiniBlock = styled(Block)`\r\nbackground-color: #F5BB13;\r\n\r\np {\r\n  color: #FFFFFF;\r\n  background-color: #7b1100;\r\n}\r\n`;\r\n\r\nconst VictiniBlock = ({ disabled }) => (\r\n  <StyledVictiniBlock\r\n    text=\"You Win!\"\r\n    sprite=\"http://gummicode.github.io/national-pokedex-game/assets/victini.png\"\r\n    disabled={disabled}\r\n  />\r\n);\r\n\r\nVictiniBlock.propTypes = {\r\n  disabled: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default VictiniBlock;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Block from './Block';\r\nimport DittoBlock from './DittoBlock';\r\nimport VictiniBlock from './VictiniBlock';\r\n\r\nconst ConditionalBlock = ({\r\n  sprite, text, dexNumber, pokemonData, setPokemonData,\r\n}) => {\r\n  if (pokemonData.win && pokemonData.answer !== dexNumber) {\r\n    return (\r\n      <VictiniBlock\r\n        disabled\r\n      />\r\n    );\r\n  } if (\r\n    pokemonData.selected.includes(dexNumber)\r\n  ) {\r\n    return (\r\n      <DittoBlock\r\n        disabled\r\n      />\r\n    );\r\n  }\r\n  return (\r\n    <Block\r\n      key={text}\r\n      sprite={sprite}\r\n      text={text}\r\n      dexNumber={dexNumber}\r\n      pokemonData={pokemonData}\r\n      setPokemonData={setPokemonData}\r\n      disabled={false}\r\n    />\r\n  );\r\n};\r\n\r\nConditionalBlock.defaultProps = {\r\n  sprite: '',\r\n  dexNumber: 0,\r\n};\r\n\r\nConditionalBlock.propTypes = {\r\n  sprite: PropTypes.string,\r\n  text: PropTypes.string.isRequired,\r\n  dexNumber: PropTypes.number,\r\n  pokemonData: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n    PropTypes.array,\r\n    PropTypes.object,\r\n  ]).isRequired,\r\n  setPokemonData: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ConditionalBlock;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport ConditionalBlock from './ConditionalBlock';\r\n\r\nconst GridContainer = styled.div`\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  justify-content: center;\r\n`;\r\n\r\nconst StyledGrid = styled.div`\r\n  margin: 300px 0 0 0;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  justify-content: space-evenly;\r\n  align-items: flex-start;\r\n\r\n  @media (min-height: 600px) {\r\n    margin: 300px 0 0 0;\r\n  }\r\n\r\n  @media (min-width: 500px) {\r\n    width: 500px;\r\n  }\r\n`;\r\n\r\nconst Grid = ({ pokemonData, setPokemonData }) => (\r\n  <GridContainer>\r\n    <StyledGrid>\r\n      {!pokemonData.pokemon[0]\r\n        ? (<h1>loading...</h1>)\r\n        : (pokemonData.pokemon.map((singlePokemon) => (\r\n          <ConditionalBlock\r\n            key={singlePokemon.species.name}\r\n            sprite={singlePokemon.sprites.front_default}\r\n            text={singlePokemon.species.name}\r\n            dexNumber={singlePokemon.id}\r\n            pokemonData={pokemonData}\r\n            setPokemonData={setPokemonData}\r\n          />\r\n        )))}\r\n    </StyledGrid>\r\n  </GridContainer>\r\n);\r\n\r\nGrid.propTypes = {\r\n  pokemonData: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n    PropTypes.array,\r\n    PropTypes.object,\r\n  ]).isRequired,\r\n  setPokemonData: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Grid;\r\n","import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport Header from './Header';\r\nimport Grid from './Grid';\r\nimport refreshPokemonData from '../helpers/refreshPokemonData';\r\n\r\nconst GameContainer = styled.div`\r\nmin-width: 310px;\r\n`;\r\n\r\nconst Game = () => {\r\n  const [busy, setBusy] = useState(true);\r\n\r\n  const [difficulty, setDifficulty] = useState({\r\n    mode: 'easy',\r\n    numPokemon: 6,\r\n  });\r\n\r\n  const [pokemonData, setPokemonData] = useState({\r\n    answer: null,\r\n    selected: [],\r\n    pokemon: [],\r\n    win: false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    refreshPokemonData(setBusy, setPokemonData, difficulty);\r\n  }, [difficulty]);\r\n\r\n  return (\r\n    <GameContainer>\r\n      <Header\r\n        busy={busy}\r\n        answer={pokemonData.answer}\r\n        difficulty={difficulty}\r\n        win={pokemonData.win}\r\n        setDifficulty={setDifficulty}\r\n        setBusy={setBusy}\r\n        setPokemonData={setPokemonData}\r\n      />\r\n      <Grid\r\n        pokemonData={pokemonData}\r\n        setPokemonData={setPokemonData}\r\n      />\r\n    </GameContainer>\r\n  );\r\n};\r\nexport default Game;\r\n","import React from 'react';\r\nimport Game from './Game';\r\n\r\nfunction App() {\r\n  return (\r\n    <Game />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    margin: 0;\r\n    padding: 0;\r\n    color: whitesmoke;\r\n    background-color: darkslategrey;\r\n    font-family: 'Bungee', sans-serif;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport GlobalStyle from './styles/GlobalStyles';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <GlobalStyle />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}